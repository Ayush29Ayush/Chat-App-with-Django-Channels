1. Refer IMAGES directory to understand the flow and steps for this project.
2. First we will create a Django starter with Allauth and Htmx for this project.
3. Paste these in requirements.txt file
"
Django
pillow
django-cleanup
django-allauth
django-htmx
"
4. pillow is used to upload images. django-cleanup is used to delete duplicate images. django-allauth is used for authentication. django-htmx is used for htmx. 
5. Create a home_view function in views.py file. Link that view to "" path in urls.py file. Add app's urls in projects urls.py. Add a home.html template in templates folder.
6. Since we will have lots of templates for different functionality, create the templates directory in the BASE_DIR rather than inside the a_home app directory.
7. Add a home.html template in templates folder.

#! IMP => base.html -> layout.html -> page.html
8. Check the templates directory to understand the flow of templates
9. Now create a static folder in the BASE_DIR and add the static folder's path in settings.py file.
"STATICFILES_DIRS = [BASE_DIR / "static"]"
10. Create a new app for users named a_users and add it to INSTALLED_APPS in settings.py file.
11. Create a Profile model in models.py and register it in admin.py.
12. Now to create a Profile object everytime a new user is created, we need SIGNALS. Create a signals.py file in a_users directory.
13. For the signals to work, we have to register it in apps.py file.
14. Now add "'allauth','allauth.account'" in INSTALLED_APPS in settings.py file and add "'allauth.account.middleware.AccountMiddleware'' in MIDDLEWARE in settings.py file."
15. Run "python manage.py makemigrations" and "python manage.py migrate".
16. Create a superuser using "python manage.py createsuperuser".
17. Create urls and views for rendering user profile details and pass them through context to header.html template.
18. Create forms.py for specific views.
19. Add "'django_cleanup.apps.CleanupConfig'" in INSTALLED_APPS in settings.py file to remove duplicate images.
20. Now for django-allauth, add the required lines in settings.py file.
"https://docs.allauth.org/en/latest/installation/quickstart.html"
21. We will write a custom template for django-allauth's login and logout page. Just write a base.html which should follow our template format, rest of the content is handled by django-allauth.
22. Django-allauth has its own messages templates which are shown in the pop-ups, to remove them just create templates with empty content. Check account templates.
23. Add settings for django-htmx in settings.py file.
24. Add a media folder in the BASE_DIR and add the media folder's path in settings.py file. Add a avatar folder in the media folder.

#! FOR HTMX -> "https://www.youtube.com/watch?v=r-GSGH2RxJs" and "https://www.youtube.com/watch?v=TT7SV-bAZyA"


#! Basic setup for chat-app
1. create a new app named "a_rtchat" using "python manage.py startapp a_rtchat"
2. Add it to INSTALLED_APPS in settings.py file
3. Create view url and template for it.
4. Create models and register them to admin.py
5. Go to admin and create some dummy data.
6. Go to views and get those data and render them in template. Check the use of related_name.
7. We used ""{% for message in chat_messages reversed %} to reverse the order of messages.
8. Create a forms.py which will act as the form for the chat messages in the text input field. "ChatmessageCreateForm" is the name of the form.
9. Add that form to the views.py with logic and pass it to the template through context.
10. Everytime we type and press enter, the page is refreshed and new message is added, but we want to save and see that message without refreshing the page. So we will use htmx.
11. Replace 
"
<form id="chat_message_form" method='POST' class="w-full">
    {% csrf_token %}
    {{ form }}
</form>
"
with 
```
<form id="chat_message_form" class="w-full" hx-post="{% url 'home' %}" hx-target="#chat_messages" hx-swap="beforeend" _="on htmx:afterRequest reset() me">
    {% csrf_token %}
    {{ form }}
</form>
```
12. hx-post means post the form data to the url. hx-target means where to render the data. hx-swap means what to do with the rendered data. hx-swap="beforeend" means before the end of the element.
13. Add hyperscript cdn to base.html
14. Hyperscript is a scripting language for doing front end web development. It is designed to make it very easy to respond to events and do simple DOM manipulation in code that is directly embedded on elements on a web page.
15. _="on htmx:afterRequest reset() me" means that after the request is done, reset the form. This is done using hyperscript.
16. chat.html is the main template. chat_message.html is the chunk of the template which has the logic whether to show the message on the left or the right based on whether the  user is the author of the message. chat_message_p.html is a partial template which gets rendered using the context provided by the htmx logic in the view and added to the main template message area at the end because of htmx-swap="beforeend".